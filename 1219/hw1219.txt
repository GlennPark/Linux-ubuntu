1번. BMP 파일 헤더(책 480 페이지)만 이용해서 BMP 파일을 읽고 픽셀의 값을 출력하는 프로그램을 작성하세요.
입력 : BMP 파일이름
출력 : (255, 255, 255)     <—— BGR 픽셀의 값

2번. BMP 파일 헤더만 이용해서 BMP 파일을 복사하세요. 단 복사되는 파일은 임의의 팔렛트 256개를 추가해야 합니다.

3번. 2중 for 루프를 1중 for 루프로 변경하세요.

4번. 배열로 작성된 코드를 포인터로 변경하세요.

1

#include <stdio.h>

#include <stdlib.h>




#include "bmpHeader.h"




int main(int argc, char **argv)

{

	//Variable declaration 

	FILE *file;

	BITMAPFILEHEADER bmpHeader;

	BITMAPINFOHEADER bmpInfoHeader;

	unsigned char *image; 




	//Open the input file

	file = fopen(argv[1], "rb");




	//Read bitmap headers

	fread(&bmpHeader, sizeof(BITMAPFILEHEADER), 1, file);

	fread(&bmpInfoHeader, sizeof(BITMAPINFOHEADER), 1, file);




	//Check the bit count whether it is 24bit or not 

	if(bmpInfoHeader.biBitCount != 24) {

		perror("You can use only 24bit image\n");

		return -1;	

	}




	

	if (bmpInfoHeader.SizeImage == 0)

		bmpInfoHeader.SizeImage = \

			bmpInfoHeader.biWidth * bmpInfoHeader.biHeight * bmpInfoHeader.biBitCount / 8; 




	image = (unsigned char*)malloc\

		(sizeof(unsigned char) * bmpInfoHeader.SizeImage);




	fread(image, sizeof(unsigned char), bmpInfoHeader.SizeImage, file);

	

	for(int i=0; i < bmpInfoHeader.SizeImage; i+=bmpInfoHeader.biBitCount/8) {

		printf("(%d, %d, %d)\n", image[i], image[i+1], image[i+2]);

	}




	fclose(file);




	return 0;

}


2

#include <stdio.h>

#include <stdlib.h>




#include "bmpHeader.h"







#define ubyte unsigned char




int main(int argc, char **argv)

{

	FILE *file;




	BITMAPFILEHEADER bmpHeader;

	BITMAPINFOHEADER bmpInfoHeader;




	ubyte *inimg, *outimg;

	RGBQUAD *pal;




	file = fopen(argv[1], "rb");




	fread(&bmpHeader, sizeof(BITMAPFILEHEADER), 1, file);

	fread(&bmpInfoHeader, sizeof(BITMAPINFOHEADER), 1, file);

	

	if(bmpInfoHeader.biBitCount != 24){

		perror("You can use only 24 bits BITMAP images");

		return -1;

	}




	if(!bmpInfoHeader.SizeImage)

		bmpInfoHeader.SizeImage = bmpInfoHeader.biWidth *\

				 bmpInfoHeader.biHeight * bmpInfoHeader.biBitCount / 8;

	

	inimg = (ubyte*)malloc(sizeof(ubyte) * bmpInfoHeader.SizeImage);

	outimg = (ubyte*)malloc(sizeof(ubyte) * bmpInfoHeader.SizeImage);

	pal = (RGBQUAD*)malloc(sizeof(RGBQUAD) * 256);




	fread(inimg, sizeof(ubyte), bmpInfoHeader.SizeImage, file);

	fclose(file);




	for(int i = 0; i < 256; i++){

		pal[i].rgbBlue = pal[i].rgbGreen = pal[i].rgbRed = i;

	}




	for(int j = 0; j < bmpInfoHeader.biHeight; j++){

		for (int i = 0; i < bmpInfoHeader.biWidth; i++){

			for(int z = 0; z < 3; z++){

				outimg[(i*3)+(j*bmpInfoHeader.biWidth*3)+z] 

					= inimg[(i*3)+(j*bmpInfoHeader.biWidth*3)+z];

			}




		}

	}







	bmpInfoHeader.biClrUsed = 256;

	bmpHeader.bfSize += sizeof(RGBQUAD) * bmpInfoHeader.biClrUsed;

	bmpHeader.bfOffBits += sizeof(RGBQUAD) * bmpInfoHeader.biClrUsed;




	file = fopen(argv[2], "w");




	fwrite(&bmpHeader, sizeof(BITMAPFILEHEADER), 1, file);

	fwrite(&bmpInfoHeader, sizeof(BITMAPINFOHEADER), 1, file);

	fwrite(pal, sizeof(RGBQUAD), bmpInfoHeader.biClrUsed, file);

	fwrite(outimg, sizeof(ubyte), bmpInfoHeader.SizeImage, file);




	fclose(file);




	free(inimg);

	free(outimg);

	free(pal);




	return 0;

}

3

#include <stdio.h>

#include <stdlib.h>




#include "bmpHeader.h"




#define ubyte unsigned char




int main(int argc, char **argv)

{

	FILE *file;

	

	BITMAPFILEHEADER bmpHeader;

	BITMAPINFOHEADER bmpInfoHeader;




	ubyte *inimg, *outimg;

	

	file = fopen(argv[1], "rb");




	fread(&bmpHeader, sizeof(BITMAPFILEHEADER), 1, file);

	fread(&bmpInfoHeader, sizeof(BITMAPINFOHEADER), 1, file);

	

	if(!bmpInfoHeader.SizeImage)

		bmpInfoHeader.SizeImage = bmpInfoHeader.biWidth *\

			 bmpInfoHeader.biHeight * bmpInfoHeader.biBitCount / 8;




	inimg = (ubyte*)malloc(sizeof(ubyte) * bmpInfoHeader.SizeImage);

	outimg = (ubyte*)malloc(sizeof(ubyte) * bmpInfoHeader.SizeImage);




	fread(inimg, sizeof(ubyte), bmpInfoHeader.SizeImage, file);

	fclose(file);




	for(int i = 0; i < bmpInfoHeader.SizeImage; i++)

		outimg[i] = inimg[i];

	




	file = fopen(argv[2], "w");




	fwrite(&bmpHeader, sizeof(BITMAPFILEHEADER), 1, file);

	fwrite(&bmpInfoHeader, sizeof(BITMAPINFOHEADER), 1, file);

	fwrite(outimg, sizeof(ubyte), bmpInfoHeader.SizeImage, file);




	fclose(file);




	return 0;

}

4

#include <stdio.h>

#include <stdlib.h>




#include "bmpHeader.h"




#define ubyte unsigned char




int main(int argc, char **argv)

{

	FILE *file;

	

	BITMAPFILEHEADER bmpHeader;

	BITMAPINFOHEADER bmpInfoHeader;




	ubyte *inimg, *outimg;

	

	file = fopen(argv[1], "rb");




	fread(&bmpHeader, sizeof(BITMAPFILEHEADER), 1, file);

	fread(&bmpInfoHeader, sizeof(BITMAPINFOHEADER), 1, file);

	

	if(!bmpInfoHeader.SizeImage)

		bmpInfoHeader.SizeImage = bmpInfoHeader.biWidth *\

			 bmpInfoHeader.biHeight * bmpInfoHeader.biBitCount / 8;




	inimg = (ubyte*)malloc(sizeof(ubyte) * bmpInfoHeader.SizeImage);

	outimg = (ubyte*)malloc(sizeof(ubyte) * bmpInfoHeader.SizeImage);




	fread(inimg, sizeof(ubyte), bmpInfoHeader.SizeImage, file);

	fclose(file);




	for(int i = 0; i < bmpInfoHeader.SizeImage; i++)

		*(outimg+i) = *(inimg+i);

	




	file = fopen(argv[2], "w");




	fwrite(&bmpHeader, sizeof(BITMAPFILEHEADER), 1, file);

	fwrite(&bmpInfoHeader, sizeof(BITMAPINFOHEADER), 1, file);

	fwrite(outimg, sizeof(ubyte), bmpInfoHeader.SizeImage, file);




	fclose(file);




	return 0;

}


